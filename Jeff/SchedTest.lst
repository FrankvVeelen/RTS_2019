
SchedTest.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .bss	00000000 .bss
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000130 l       *ABS*	00000000 MPY
00000132 l       *ABS*	00000000 MPYS
00000134 l       *ABS*	00000000 MAC
00000136 l       *ABS*	00000000 MACS
00000138 l       *ABS*	00000000 OP2
0000013a l       *ABS*	00000000 RESLO
0000013c l       *ABS*	00000000 RESHI
0000013e l       *ABS*	00000000 SUMEXT
00000020 l       *ABS*	00000000 P1IN
00000021 l       *ABS*	00000000 P1OUT
00000022 l       *ABS*	00000000 P1DIR
00000023 l       *ABS*	00000000 P1IFG
00000024 l       *ABS*	00000000 P1IES
00000025 l       *ABS*	00000000 P1IE
00000026 l       *ABS*	00000000 P1SEL
00000028 l       *ABS*	00000000 P2IN
00000029 l       *ABS*	00000000 P2OUT
0000002a l       *ABS*	00000000 P2DIR
0000002b l       *ABS*	00000000 P2IFG
0000002c l       *ABS*	00000000 P2IES
0000002d l       *ABS*	00000000 P2IE
0000002e l       *ABS*	00000000 P2SEL
00000018 l       *ABS*	00000000 P3IN
00000019 l       *ABS*	00000000 P3OUT
0000001a l       *ABS*	00000000 P3DIR
0000001b l       *ABS*	00000000 P3SEL
0000001c l       *ABS*	00000000 P4IN
0000001d l       *ABS*	00000000 P4OUT
0000001e l       *ABS*	00000000 P4DIR
0000001f l       *ABS*	00000000 P4SEL
00000030 l       *ABS*	00000000 P5IN
00000031 l       *ABS*	00000000 P5OUT
00000032 l       *ABS*	00000000 P5DIR
00000033 l       *ABS*	00000000 P5SEL
00000034 l       *ABS*	00000000 P6IN
00000035 l       *ABS*	00000000 P6OUT
00000036 l       *ABS*	00000000 P6DIR
00000037 l       *ABS*	00000000 P6SEL
00000070 l       *ABS*	00000000 U0CTL
00000071 l       *ABS*	00000000 U0TCTL
00000072 l       *ABS*	00000000 U0RCTL
00000073 l       *ABS*	00000000 U0MCTL
00000074 l       *ABS*	00000000 U0BR0
00000075 l       *ABS*	00000000 U0BR1
00000076 l       *ABS*	00000000 U0RXBUF
00000077 l       *ABS*	00000000 U0TXBUF
00000070 l       *ABS*	00000000 UCTL
00000071 l       *ABS*	00000000 UTCTL
00000072 l       *ABS*	00000000 URCTL
00000073 l       *ABS*	00000000 UMCTL
00000074 l       *ABS*	00000000 UBR0
00000075 l       *ABS*	00000000 UBR1
00000076 l       *ABS*	00000000 RXBUF
00000077 l       *ABS*	00000000 TXBUF
00000070 l       *ABS*	00000000 UCTL0
00000071 l       *ABS*	00000000 UTCTL0
00000072 l       *ABS*	00000000 URCTL0
00000073 l       *ABS*	00000000 UMCTL0
00000074 l       *ABS*	00000000 UBR00
00000075 l       *ABS*	00000000 UBR10
00000076 l       *ABS*	00000000 RXBUF0
00000077 l       *ABS*	00000000 TXBUF0
00000070 l       *ABS*	00000000 UCTL_0
00000071 l       *ABS*	00000000 UTCTL_0
00000072 l       *ABS*	00000000 URCTL_0
00000073 l       *ABS*	00000000 UMCTL_0
00000074 l       *ABS*	00000000 UBR0_0
00000075 l       *ABS*	00000000 UBR1_0
00000076 l       *ABS*	00000000 RXBUF_0
00000077 l       *ABS*	00000000 TXBUF_0
00000050 l       *ABS*	00000000 I2CIE
00000051 l       *ABS*	00000000 I2CIFG
00000052 l       *ABS*	00000000 I2CNDAT
00000071 l       *ABS*	00000000 I2CTCTL
00000072 l       *ABS*	00000000 I2CDCTL
00000073 l       *ABS*	00000000 I2CPSC
00000074 l       *ABS*	00000000 I2CSCLH
00000075 l       *ABS*	00000000 I2CSCLL
00000076 l       *ABS*	00000000 I2CDRB
00000076 l       *ABS*	00000000 I2CDRW
00000118 l       *ABS*	00000000 I2COA
0000011a l       *ABS*	00000000 I2CSA
0000011c l       *ABS*	00000000 I2CIV
00000076 l       *ABS*	00000000 I2CDR
00000078 l       *ABS*	00000000 U1CTL
00000079 l       *ABS*	00000000 U1TCTL
0000007a l       *ABS*	00000000 U1RCTL
0000007b l       *ABS*	00000000 U1MCTL
0000007c l       *ABS*	00000000 U1BR0
0000007d l       *ABS*	00000000 U1BR1
0000007e l       *ABS*	00000000 U1RXBUF
0000007f l       *ABS*	00000000 U1TXBUF
00000078 l       *ABS*	00000000 UCTL1
00000079 l       *ABS*	00000000 UTCTL1
0000007a l       *ABS*	00000000 URCTL1
0000007b l       *ABS*	00000000 UMCTL1
0000007c l       *ABS*	00000000 UBR01
0000007d l       *ABS*	00000000 UBR11
0000007e l       *ABS*	00000000 RXBUF1
0000007f l       *ABS*	00000000 TXBUF1
00000078 l       *ABS*	00000000 UCTL_1
00000079 l       *ABS*	00000000 UTCTL_1
0000007a l       *ABS*	00000000 URCTL_1
0000007b l       *ABS*	00000000 UMCTL_1
0000007c l       *ABS*	00000000 UBR0_1
0000007d l       *ABS*	00000000 UBR1_1
0000007e l       *ABS*	00000000 RXBUF_1
0000007f l       *ABS*	00000000 TXBUF_1
00000055 l       *ABS*	00000000 SVSCTL
00000128 l       *ABS*	00000000 FCTL1
0000012a l       *ABS*	00000000 FCTL2
0000012c l       *ABS*	00000000 FCTL3
00000059 l       *ABS*	00000000 CACTL1
0000005a l       *ABS*	00000000 CACTL2
0000005b l       *ABS*	00000000 CAPD
0000012e l       *ABS*	00000000 TA0IV
00000160 l       *ABS*	00000000 TA0CTL
00000170 l       *ABS*	00000000 TA0R
00000162 l       *ABS*	00000000 TA0CCTL0
00000164 l       *ABS*	00000000 TA0CCTL1
00000172 l       *ABS*	00000000 TA0CCR0
00000174 l       *ABS*	00000000 TA0CCR1
00000166 l       *ABS*	00000000 TA0CCTL2
00000176 l       *ABS*	00000000 TA0CCR2
0000011e l       *ABS*	00000000 TBIV
00000180 l       *ABS*	00000000 TBCTL
00000190 l       *ABS*	00000000 TBR
00000182 l       *ABS*	00000000 TBCCTL0
00000184 l       *ABS*	00000000 TBCCTL1
00000186 l       *ABS*	00000000 TBCCTL2
00000192 l       *ABS*	00000000 TBCCR0
00000194 l       *ABS*	00000000 TBCCR1
00000196 l       *ABS*	00000000 TBCCR2
00000188 l       *ABS*	00000000 TBCCTL3
0000018a l       *ABS*	00000000 TBCCTL4
0000018c l       *ABS*	00000000 TBCCTL5
0000018e l       *ABS*	00000000 TBCCTL6
00000198 l       *ABS*	00000000 TBCCR3
0000019a l       *ABS*	00000000 TBCCR4
0000019c l       *ABS*	00000000 TBCCR5
0000019e l       *ABS*	00000000 TBCCR6
00000056 l       *ABS*	00000000 DCOCTL
00000057 l       *ABS*	00000000 BCSCTL1
00000058 l       *ABS*	00000000 BCSCTL2
000001a0 l       *ABS*	00000000 ADC12CTL0
000001a2 l       *ABS*	00000000 ADC12CTL1
000001a4 l       *ABS*	00000000 ADC12IFG
000001a6 l       *ABS*	00000000 ADC12IE
000001a8 l       *ABS*	00000000 ADC12IV
00000140 l       *ABS*	00000000 ADC12MEM0
00000142 l       *ABS*	00000000 ADC12MEM1
00000144 l       *ABS*	00000000 ADC12MEM2
00000146 l       *ABS*	00000000 ADC12MEM3
00000148 l       *ABS*	00000000 ADC12MEM4
0000014a l       *ABS*	00000000 ADC12MEM5
0000014c l       *ABS*	00000000 ADC12MEM6
0000014e l       *ABS*	00000000 ADC12MEM7
00000150 l       *ABS*	00000000 ADC12MEM8
00000152 l       *ABS*	00000000 ADC12MEM9
00000154 l       *ABS*	00000000 ADC12MEM10
00000156 l       *ABS*	00000000 ADC12MEM11
00000158 l       *ABS*	00000000 ADC12MEM12
0000015a l       *ABS*	00000000 ADC12MEM13
0000015c l       *ABS*	00000000 ADC12MEM14
0000015e l       *ABS*	00000000 ADC12MEM15
00000080 l       *ABS*	00000000 ADC12MCTL0
00000081 l       *ABS*	00000000 ADC12MCTL1
00000082 l       *ABS*	00000000 ADC12MCTL2
00000083 l       *ABS*	00000000 ADC12MCTL3
00000084 l       *ABS*	00000000 ADC12MCTL4
00000085 l       *ABS*	00000000 ADC12MCTL5
00000086 l       *ABS*	00000000 ADC12MCTL6
00000087 l       *ABS*	00000000 ADC12MCTL7
00000088 l       *ABS*	00000000 ADC12MCTL8
00000089 l       *ABS*	00000000 ADC12MCTL9
0000008a l       *ABS*	00000000 ADC12MCTL10
0000008b l       *ABS*	00000000 ADC12MCTL11
0000008c l       *ABS*	00000000 ADC12MCTL12
0000008d l       *ABS*	00000000 ADC12MCTL13
0000008e l       *ABS*	00000000 ADC12MCTL14
0000008f l       *ABS*	00000000 ADC12MCTL15
000001c0 l       *ABS*	00000000 DAC12_0CTL
000001c2 l       *ABS*	00000000 DAC12_1CTL
000001c8 l       *ABS*	00000000 DAC12_0DAT
000001ca l       *ABS*	00000000 DAC12_1DAT
00000122 l       *ABS*	00000000 DMACTL0
00000124 l       *ABS*	00000000 DMACTL1
000001e0 l       *ABS*	00000000 DMA0CTL
000001e2 l       *ABS*	00000000 DMA0SA
000001e4 l       *ABS*	00000000 DMA0DA
000001e6 l       *ABS*	00000000 DMA0SZ
000001e8 l       *ABS*	00000000 DMA1CTL
000001ea l       *ABS*	00000000 DMA1SA
000001ec l       *ABS*	00000000 DMA1DA
000001ee l       *ABS*	00000000 DMA1SZ
000001f0 l       *ABS*	00000000 DMA2CTL
000001f2 l       *ABS*	00000000 DMA2SA
000001f4 l       *ABS*	00000000 DMA2DA
000001f6 l       *ABS*	00000000 DMA2SZ
00000120 l       *ABS*	00000000 WDTCTL
00000000 l       *ABS*	00000000 IE1
00000002 l       *ABS*	00000000 IFG1
00000001 l       *ABS*	00000000 IE2
00000003 l       *ABS*	00000000 IFG2
00000004 l       *ABS*	00000000 ME1
00000005 l       *ABS*	00000000 ME2
00000000 l    df *ABS*	00000000 SchedTest.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Led.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Clock.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Context.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00001100 l     O .bss	00000001 CurrentContext
00001102 l     O .bss	00000003 Contexts
00000000 l    df *ABS*	00000000 SchedulerOnline.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Scheduler_NP_FP.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00001106 l     O .bss	00000002 Running.1742
00000000 l    df *ABS*	00000000 Scheduler_P_FP.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Scheduler_P_EDF.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Scheduler_NP_EDF.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00001108 l     O .bss	00000002 Running.1752
00000000 l    df *ABS*	00000000 TimeTracking.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
0000110a l     O .bss	00000004 StartTimes
0000110e l     O .bss	00000004 Totals
00001112 l     O .bss	00000001 JobsExecuted
00000000 g       *ABS*	00000000 __data_size
000042e2 g     F .text	00000084 RegisterTask
0000427c g     F .text	00000016 ResumeContext
0000424c g     F .text	00000018 InitClock
00004714 g     F .text	0000000c StartTracking
0000422c g     F .text	0000000a InitLeds
00004036 g     F .text	00000018 CountDelay
00004768 g       .text	00000000 _etext
00000046 g       *ABS*	00000000 __bss_size
00004736 g     F .text	00000006 AddJobExecution
00004030 g       .text	00000000 _unexpected_1_
00004030  w      .text	00000000 vector_ffe0
00004416 g     F .text	0000009e Scheduler_NP_FP
00004628 g     F .text	000000ec Scheduler_NP_EDF
000044b4 g     F .text	00000086 Scheduler_P_FP
0000453a g     F .text	000000ee Scheduler_P_EDF
0000437a g       .text	00000000 vector_ffec
00004030  w      .text	00000000 vector_fff0
00004768 g       *ABS*	00000000 __data_load_start
00004030 g       .text	00000000 __dtors_end
00004030  w      .text	00000000 vector_fffc
000041f0 g     F .text	0000003c BlinkYellow
00004030  w      .text	00000000 vector_ffe4
00004246 g     F .text	00000006 ToggleLeds
00004236 g     F .text	00000010 SetLeds
0000ffe0 g     O .vectors	00000020 InterruptVectors
00004366 g     F .text	00000014 UnRegisterTask
00004264 g     F .text	00000018 ContextSwitch
000041b4 g     F .text	0000003c BlinkGreen
0000401c  w      .text	00000000 __do_clear_bss
0000437a g     F .text	0000009c TimerIntrpt
00004030  w      .text	00000000 vector_ffe2
00004030  w      .text	00000000 vector_ffe8
00004034  w      .text	00000000 _unexpected_
00004030  w      .text	00000000 vector_fffa
00001114 g     O .bss	00000030 Tasks
00004000  w      .text	00000000 _reset_vector__
00004030 g       .text	00000000 __ctors_start
0000400a  w      .text	00000000 __do_copy_data
0000404e g     F .text	00000020 CountRealtimeDelay
00001100 g       .bss	00000000 __bss_start
00004030  w      .text	00000000 vector_ffee
00004030  w      .text	00000000 vector_fff4
0000406e g     F .text	0000010a main
00004030  w      .text	00000000 vector_fff8
0000473c g     F .text	0000002c PrintResults
00004030  w      .text	00000000 vector_fff2
00004178 g     F .text	0000003c BlinkRed
00010000 g       .vectors	00000000 _vectors_end
00004030  w      .text	00000000 vector_ffe6
00004292 g     F .text	00000006 IntDisable
00001144 g     O .bss	00000002 NextInterruptTime
00004000  w      .text	00000000 __init_stack
00004030 g       .text	00000000 __dtors_start
00004030 g       .text	00000000 __ctors_end
00003900 g       *ABS*	00000000 __stack
00001100 g       .bss	00000000 _edata
00001146 g       .bss	00000000 _end
00004030  w      .text	00000000 vector_fff6
00004004  w      .text	00000000 __low_level_init
0000402c  w      .text	00000000 __jump_to_main
0000429c g     F .text	00000046 InitTasks
00001100 g       .bss	00000000 __data_start
00004030  w      .text	00000000 vector_ffea
00004720 g     F .text	00000016 StopTracking
00004298 g     F .text	00000004 RestoreSW



Disassembly of section .text:

00004000 <__init_stack>:
    4000:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004004 <__low_level_init>:
    4004:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4008:	20 01 

0000400a <__do_copy_data>:
    400a:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    400e:	0f 93       	tst	r15		
    4010:	05 24       	jz	$+12     	;abs 0x401c
    4012:	2f 83       	decd	r15		
    4014:	9f 4f 68 47 	mov	18280(r15),4352(r15);0x4768(r15), 0x1100(r15)
    4018:	00 11 
    401a:	fb 23       	jnz	$-8      	;abs 0x4012

0000401c <__do_clear_bss>:
    401c:	3f 40 46 00 	mov	#70,	r15	;#0x0046
    4020:	0f 93       	tst	r15		
    4022:	04 24       	jz	$+10     	;abs 0x402c
    4024:	1f 83       	dec	r15		
    4026:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    402a:	fc 23       	jnz	$-6      	;abs 0x4024

0000402c <__jump_to_main>:
    402c:	30 40 6e 40 	br	#0x406e	

00004030 <__ctors_end>:
    4030:	30 40 34 40 	br	#0x4034	

00004034 <_unexpected_>:
    4034:	00 13       	reti			

00004036 <CountDelay>:
#define YELLOWBLINKPRIO 0
#define GREENBLINKPRIO  1
#define REDBLINKPRIO    2

void CountDelay (volatile uint16_t cnt)
{
    4036:	21 83       	decd	r1		
    4038:	81 4f 00 00 	mov	r15,	0(r1)	;0x0000(r1)
  while (cnt--);
    403c:	2f 41       	mov	@r1,	r15	
    403e:	0e 4f       	mov	r15,	r14	
    4040:	3e 53       	add	#-1,	r14	;r3 As==11
    4042:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    4046:	0f 93       	tst	r15		
    4048:	f9 23       	jnz	$-12     	;abs 0x403c
}
    404a:	21 53       	incd	r1		
    404c:	30 41       	ret			

0000404e <CountRealtimeDelay>:
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    404e:	0f 5f       	rla	r15		
    4050:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    4052:	1d 42 70 01 	mov	&0x0170,r13	
    4056:	0e 43       	clr	r14		
  while (TicksPassed < Ticks) // continue until all ticks have passed
    4058:	07 3c       	jmp	$+16     	;abs 0x4068
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    405a:	1c 42 70 01 	mov	&0x0170,r12	
    405e:	0d 9c       	cmp	r12,	r13	
    4060:	fc 27       	jz	$-6      	;abs 0x405a
    {
      TicksPassed++; // increment ticks counter
    4062:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    4064:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    4068:	0e 9f       	cmp	r15,	r14	
    406a:	f7 2b       	jnc	$-16     	;abs 0x405a
    {
      TicksPassed++; // increment ticks counter
      OldTAR = TAR; // store new value of TAR as old value
    }
  }
}
    406c:	30 41       	ret			

0000406e <main>:
  CountRealtimeDelay(ExecutionTime);
  SetLeds (RED, 0);
}

int main(void) 
{ 
    406e:	31 40 00 39 	mov	#14592,	r1	;#0x3900
  WDTCTL = WDTPW + WDTHOLD;       // Stop watchdog timer 
    4072:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4076:	20 01 
  
  InitClock ();
    4078:	b0 12 4c 42 	call	#0x424c	

  InitLeds (RED | GREEN | YELLOW | WHITE | BROWN | PURPLE);
    407c:	7f 40 77 00 	mov.b	#119,	r15	;#0x0077
    4080:	b0 12 2c 42 	call	#0x422c	
  RegisterTask (0, 1024, 150, BlinkRed, REDBLINKPRIO, 0);
#endif

#ifdef TstSweep
  // note: there 1024 ticks in second
  RegisterTask (0, 1024, 350, BlinkYellow, YELLOWBLINKPRIO, 0); 
    4084:	43 12       	push.b	#0		;r3 As==00
    4086:	43 12       	push.b	#0		;r3 As==00
    4088:	3c 40 f0 41 	mov	#16880,	r12	;#0x41f0
    408c:	3d 40 5e 01 	mov	#350,	r13	;#0x015e
    4090:	3e 40 00 04 	mov	#1024,	r14	;#0x0400
    4094:	0f 43       	clr	r15		
    4096:	b0 12 e2 42 	call	#0x42e2	
  RegisterTask (0, 512, 140, BlinkGreen, GREENBLINKPRIO, 0);
    409a:	43 12       	push.b	#0		;r3 As==00
    409c:	53 12       	push.b	#1		;r3 As==01
    409e:	3c 40 b4 41 	mov	#16820,	r12	;#0x41b4
    40a2:	3d 40 8c 00 	mov	#140,	r13	;#0x008c
    40a6:	3e 40 00 02 	mov	#512,	r14	;#0x0200
    40aa:	0f 43       	clr	r15		
    40ac:	b0 12 e2 42 	call	#0x42e2	
  RegisterTask (0, 256, 30, BlinkRed, REDBLINKPRIO, 0);
    40b0:	43 12       	push.b	#0		;r3 As==00
    40b2:	63 12       	push.b	#2		;r3 As==10
    40b4:	3c 40 78 41 	mov	#16760,	r12	;#0x4178
    40b8:	3d 40 1e 00 	mov	#30,	r13	;#0x001e
    40bc:	3e 40 00 01 	mov	#256,	r14	;#0x0100
    40c0:	0f 43       	clr	r15		
    40c2:	b0 12 e2 42 	call	#0x42e2	
  RegisterTask (0, 128, 10, BlinkRed, 3, 0);
    40c6:	43 12       	push.b	#0		;r3 As==00
    40c8:	70 12 03 00 	push.b	#3		;#0x0003
    40cc:	3c 40 78 41 	mov	#16760,	r12	;#0x4178
    40d0:	3d 40 0a 00 	mov	#10,	r13	;#0x000a
    40d4:	3e 40 80 00 	mov	#128,	r14	;#0x0080
    40d8:	0f 43       	clr	r15		
    40da:	b0 12 e2 42 	call	#0x42e2	
  RegisterTask (0, 256, 2, BlinkRed, 4, 0);
    40de:	43 12       	push.b	#0		;r3 As==00
    40e0:	70 12 04 00 	push.b	#4		;#0x0004
    40e4:	3c 40 78 41 	mov	#16760,	r12	;#0x4178
    40e8:	2d 43       	mov	#2,	r13	;r3 As==10
    40ea:	3e 40 00 01 	mov	#256,	r14	;#0x0100
    40ee:	0f 43       	clr	r15		
    40f0:	b0 12 e2 42 	call	#0x42e2	

  RegisterTask (0, 1024, 10, BlinkYellow, 5, 0); 
    40f4:	43 12       	push.b	#0		;r3 As==00
    40f6:	70 12 05 00 	push.b	#5		;#0x0005
    40fa:	3c 40 f0 41 	mov	#16880,	r12	;#0x41f0
    40fe:	3d 40 0a 00 	mov	#10,	r13	;#0x000a
    4102:	3e 40 00 04 	mov	#1024,	r14	;#0x0400
    4106:	0f 43       	clr	r15		
    4108:	b0 12 e2 42 	call	#0x42e2	
  RegisterTask (0, 512, 10, BlinkGreen, 6, 0);
    410c:	43 12       	push.b	#0		;r3 As==00
    410e:	70 12 06 00 	push.b	#6		;#0x0006
    4112:	3c 40 b4 41 	mov	#16820,	r12	;#0x41b4
    4116:	3d 40 0a 00 	mov	#10,	r13	;#0x000a
    411a:	3e 40 00 02 	mov	#512,	r14	;#0x0200
    411e:	0f 43       	clr	r15		
    4120:	b0 12 e2 42 	call	#0x42e2	
  RegisterTask (0, 256, 5, BlinkRed, 7, 0);
    4124:	43 12       	push.b	#0		;r3 As==00
    4126:	70 12 07 00 	push.b	#7		;#0x0007
    412a:	3c 40 78 41 	mov	#16760,	r12	;#0x4178
    412e:	3d 40 05 00 	mov	#5,	r13	;#0x0005
    4132:	3e 40 00 01 	mov	#256,	r14	;#0x0100
    4136:	0f 43       	clr	r15		
    4138:	b0 12 e2 42 	call	#0x42e2	
  RegisterTask (0, 128, 5, BlinkRed, 8, 0);
    413c:	31 50 20 00 	add	#32,	r1	;#0x0020
    4140:	43 12       	push.b	#0		;r3 As==00
    4142:	70 12 08 00 	push.b	#8		;#0x0008
    4146:	3c 40 78 41 	mov	#16760,	r12	;#0x4178
    414a:	3d 40 05 00 	mov	#5,	r13	;#0x0005
    414e:	3e 40 80 00 	mov	#128,	r14	;#0x0080
    4152:	0f 43       	clr	r15		
    4154:	b0 12 e2 42 	call	#0x42e2	
  RegisterTask (0, 256, 2, BlinkRed, 9, 0);
    4158:	43 12       	push.b	#0		;r3 As==00
    415a:	70 12 09 00 	push.b	#9		;#0x0009
    415e:	3c 40 78 41 	mov	#16760,	r12	;#0x4178
    4162:	2d 43       	mov	#2,	r13	;r3 As==10
    4164:	3e 40 00 01 	mov	#256,	r14	;#0x0100
    4168:	0f 43       	clr	r15		
    416a:	b0 12 e2 42 	call	#0x42e2	
#endif


  _EINT();                        // Enable interrupts
    416e:	32 d2       	eint			
    4170:	31 52       	add	#8,	r1	;r2 As==11

  while(1) {
    EnterLowPowerMode3(); // idle task, set to low power mode 3 
    4172:	32 c0 d0 00 	bic	#208,	r2	;#0x00d0
    4176:	fd 3f       	jmp	$-4      	;abs 0x4172

00004178 <BlinkRed>:
  CountRealtimeDelay(ExecutionTime);
  SetLeds (GREEN, 0);
}

void BlinkRed (uint16_t ExecutionTime)
{
    4178:	0b 12       	push	r11		
    417a:	0b 4f       	mov	r15,	r11	
  SetLeds (RED, 1);
    417c:	5e 43       	mov.b	#1,	r14	;r3 As==01
    417e:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    4182:	b0 12 36 42 	call	#0x4236	
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    4186:	0f 4b       	mov	r11,	r15	
    4188:	0f 5f       	rla	r15		
    418a:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    418c:	1d 42 70 01 	mov	&0x0170,r13	
    4190:	0e 43       	clr	r14		
    4192:	07 3c       	jmp	$+16     	;abs 0x41a2
  while (TicksPassed < Ticks) // continue until all ticks have passed
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    4194:	1c 42 70 01 	mov	&0x0170,r12	
    4198:	0d 9c       	cmp	r12,	r13	
    419a:	fc 27       	jz	$-6      	;abs 0x4194
    {
      TicksPassed++; // increment ticks counter
    419c:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    419e:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    41a2:	0e 9f       	cmp	r15,	r14	
    41a4:	f7 2b       	jnc	$-16     	;abs 0x4194

void BlinkRed (uint16_t ExecutionTime)
{
  SetLeds (RED, 1);
  CountRealtimeDelay(ExecutionTime);
  SetLeds (RED, 0);
    41a6:	4e 43       	clr.b	r14		
    41a8:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    41ac:	b0 12 36 42 	call	#0x4236	
}
    41b0:	3b 41       	pop	r11		
    41b2:	30 41       	ret			

000041b4 <BlinkGreen>:
  CountRealtimeDelay(ExecutionTime);
  SetLeds (YELLOW, 0);
}

void BlinkGreen (uint16_t ExecutionTime)
{
    41b4:	0b 12       	push	r11		
    41b6:	0b 4f       	mov	r15,	r11	
  SetLeds (GREEN, 1);
    41b8:	5e 43       	mov.b	#1,	r14	;r3 As==01
    41ba:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    41be:	b0 12 36 42 	call	#0x4236	
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    41c2:	0f 4b       	mov	r11,	r15	
    41c4:	0f 5f       	rla	r15		
    41c6:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    41c8:	1d 42 70 01 	mov	&0x0170,r13	
    41cc:	0e 43       	clr	r14		
    41ce:	07 3c       	jmp	$+16     	;abs 0x41de
  while (TicksPassed < Ticks) // continue until all ticks have passed
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    41d0:	1c 42 70 01 	mov	&0x0170,r12	
    41d4:	0d 9c       	cmp	r12,	r13	
    41d6:	fc 27       	jz	$-6      	;abs 0x41d0
    {
      TicksPassed++; // increment ticks counter
    41d8:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    41da:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    41de:	0e 9f       	cmp	r15,	r14	
    41e0:	f7 2b       	jnc	$-16     	;abs 0x41d0

void BlinkGreen (uint16_t ExecutionTime)
{
  SetLeds (GREEN, 1);
  CountRealtimeDelay(ExecutionTime);
  SetLeds (GREEN, 0);
    41e2:	4e 43       	clr.b	r14		
    41e4:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    41e8:	b0 12 36 42 	call	#0x4236	
}
    41ec:	3b 41       	pop	r11		
    41ee:	30 41       	ret			

000041f0 <BlinkYellow>:
    }
  }
}

void BlinkYellow (uint16_t ExecutionTime)
{
    41f0:	0b 12       	push	r11		
    41f2:	0b 4f       	mov	r15,	r11	
  SetLeds (YELLOW, 1);
    41f4:	5e 43       	mov.b	#1,	r14	;r3 As==01
    41f6:	7f 40 40 00 	mov.b	#64,	r15	;#0x0040
    41fa:	b0 12 36 42 	call	#0x4236	
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    41fe:	0f 4b       	mov	r11,	r15	
    4200:	0f 5f       	rla	r15		
    4202:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    4204:	1d 42 70 01 	mov	&0x0170,r13	
    4208:	0e 43       	clr	r14		
    420a:	07 3c       	jmp	$+16     	;abs 0x421a
  while (TicksPassed < Ticks) // continue until all ticks have passed
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    420c:	1c 42 70 01 	mov	&0x0170,r12	
    4210:	0d 9c       	cmp	r12,	r13	
    4212:	fc 27       	jz	$-6      	;abs 0x420c
    {
      TicksPassed++; // increment ticks counter
    4214:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    4216:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    421a:	0e 9f       	cmp	r15,	r14	
    421c:	f7 2b       	jnc	$-16     	;abs 0x420c

void BlinkYellow (uint16_t ExecutionTime)
{
  SetLeds (YELLOW, 1);
  CountRealtimeDelay(ExecutionTime);
  SetLeds (YELLOW, 0);
    421e:	4e 43       	clr.b	r14		
    4220:	7f 40 40 00 	mov.b	#64,	r15	;#0x0040
    4224:	b0 12 36 42 	call	#0x4236	
}
    4228:	3b 41       	pop	r11		
    422a:	30 41       	ret			

0000422c <InitLeds>:
#include <iomacros.h>
#include "Led.h"

void InitLeds (uint8_t Colors)
{
  LEDDIR |= Colors;
    422c:	c2 df 32 00 	bis.b	r15,	&0x0032	
  LEDPIN = 0;
    4230:	c2 43 31 00 	mov.b	#0,	&0x0031	;r3 As==00
}
    4234:	30 41       	ret			

00004236 <SetLeds>:

void SetLeds (uint8_t Colors, uint8_t On)
{
  if (On) LEDPIN |= Colors;
    4236:	4e 93       	tst.b	r14		
    4238:	03 24       	jz	$+8      	;abs 0x4240
    423a:	c2 df 31 00 	bis.b	r15,	&0x0031	
    423e:	30 41       	ret			
  else    LEDPIN &= ~Colors;
    4240:	c2 cf 31 00 	bic.b	r15,	&0x0031	
    4244:	30 41       	ret			

00004246 <ToggleLeds>:
}

void ToggleLeds (uint8_t Colors)
{
  LEDPIN ^= Colors;
    4246:	c2 ef 31 00 	xor.b	r15,	&0x0031	
}
    424a:	30 41       	ret			

0000424c <InitClock>:

#define ACLOCK    32768  /* rate of the Aclock                               */

void InitClock (void)
{
	TACTL  = TASSEL0 + TACLR + ID0 + ID1 + TAIE; /* ACLK, clear TAR, set clock divider at 8 */
    424c:	b2 40 c6 01 	mov	#454,	&0x0160	;#0x01c6
    4250:	60 01 
	TACCR0   = 0;  /* start first interrupt right away     */
    4252:	82 43 72 01 	mov	#0,	&0x0172	;r3 As==00
	TACCTL0  = CCIE;            /* CCR0 interrupt enabled                        */
    4256:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    425a:	62 01 
	TACTL |= MC1;		    /* Start Timer_a in continious mode */  
    425c:	b2 d0 20 00 	bis	#32,	&0x0160	;#0x0020
    4260:	60 01 
}
    4262:	30 41       	ret			

00004264 <ContextSwitch>:
static uint8_t Contexts[NUMTASKS];
static uint8_t CurrentContext = 0;

void ContextSwitch()
{
	Contexts[CurrentContext] = LEDPIN; // store current context
    4264:	5f 42 00 11 	mov.b	&0x1100,r15	
    4268:	4e 4f       	mov.b	r15,	r14	
    426a:	de 42 31 00 	mov.b	&0x0031,4354(r14);0x1102(r14)
    426e:	02 11 
	CurrentContext++;
    4270:	5f 53       	inc.b	r15		
    4272:	c2 4f 00 11 	mov.b	r15,	&0x1100	
	// TODO set this to 0xFF for leds
	LEDPIN = 0; // disable all leds
    4276:	c2 43 31 00 	mov.b	#0,	&0x0031	;r3 As==00
}
    427a:	30 41       	ret			

0000427c <ResumeContext>:

void ResumeContext()
{
	CurrentContext--;
    427c:	5f 42 00 11 	mov.b	&0x1100,r15	
    4280:	7f 53       	add.b	#-1,	r15	;r3 As==11
    4282:	c2 4f 00 11 	mov.b	r15,	&0x1100	
	LEDPIN = Contexts[CurrentContext]; // resume context
    4286:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4288:	3f 50 02 11 	add	#4354,	r15	;#0x1102
    428c:	e2 4f 31 00 	mov.b	@r15,	&0x0031	
}
    4290:	30 41       	ret			

00004292 <IntDisable>:

uint16_t IntDisable (void)
{
  uint16_t sw;
    // sw = r2
  asm volatile ("mov.w r2, %0\n\t" : "=r"(sw));
    4292:	0f 42       	mov	r2,	r15	
  _DINT();
    4294:	32 c2       	dint			
  return (sw);
}
    4296:	30 41       	ret			

00004298 <RestoreSW>:

void RestoreSW (uint16_t sw)
{
    // r2 = sw
  asm volatile ("mov.w %0, r2\n\t" :: "r"(sw));
    4298:	02 4f       	mov	r15,	r2	
}  
    429a:	30 41       	ret			

0000429c <InitTasks>:
void InitTasks (void)
{			
  uint8_t i=NUMTASKS-1; 
  do { 
    Taskp t = &Tasks[i];
    t->Flags = t->Activated = t->Invoked = 0;
    429c:	3f 40 3b 11 	mov	#4411,	r15	;#0x113b
    42a0:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    42a4:	0e 4f       	mov	r15,	r14	
    42a6:	3e 53       	add	#-1,	r14	;r3 As==11
    42a8:	ce 43 00 00 	mov.b	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    42ac:	6e 4e       	mov.b	@r14,	r14	
    42ae:	7e f3       	and.b	#-1,	r14	;r3 As==11
    42b0:	8f 4e 01 00 	mov	r14,	1(r15)	;0x0001(r15)
    42b4:	cf 43 f0 ff 	mov.b	#0,	-16(r15);r3 As==00, 0xfff0(r15)
    42b8:	0e 4f       	mov	r15,	r14	
    42ba:	3e 50 ef ff 	add	#-17,	r14	;#0xffef
    42be:	ee 4f 00 00 	mov.b	@r15,	0(r14)	;0x0000(r14)
    42c2:	6e 4e       	mov.b	@r14,	r14	
    42c4:	7e f3       	and.b	#-1,	r14	;r3 As==11
    42c6:	8f 4e f1 ff 	mov	r14,	-15(r15);0xfff1(r15)
    42ca:	cf 43 e0 ff 	mov.b	#0,	-32(r15);r3 As==00, 0xffe0(r15)
    42ce:	0e 4f       	mov	r15,	r14	
    42d0:	3e 50 df ff 	add	#-33,	r14	;#0xffdf
    42d4:	ee 4f 00 00 	mov.b	@r15,	0(r14)	;0x0000(r14)
    42d8:	6e 4e       	mov.b	@r14,	r14	
    42da:	7e f3       	and.b	#-1,	r14	;r3 As==11
    42dc:	8f 4e e1 ff 	mov	r14,	-31(r15);0xffe1(r15)
  } while (i--);
}
    42e0:	30 41       	ret			

000042e2 <RegisterTask>:
 * Each priority level has at most one task.
 */

uint8_t RegisterTask (uint16_t Phasing, uint16_t Period, uint16_t ExecutionTime,
                      void (*TaskFunc) (uint16_t), uint8_t Prio, uint8_t Flags)
{
    42e2:	0b 12       	push	r11		
    42e4:	0a 12       	push	r10		
    42e6:	09 12       	push	r9		
    42e8:	05 12       	push	r5		
    42ea:	05 41       	mov	r1,	r5	
    42ec:	35 50 0a 00 	add	#10,	r5	;#0x000a
    42f0:	6b 45       	mov.b	@r5,	r11	
    42f2:	59 45 02 00 	mov.b	2(r5),	r9	;0x0002(r5)
  uint16_t sw;

  Phasing *= 4; // correct to get ms approximately
  Period *=4; // correct to get ms approximately

  if (Prio>=NUMTASKS) return (E_BOUNDS); // out of bounds
    42f6:	7b 90 03 00 	cmp.b	#3,	r11	;#0x0003
    42fa:	02 28       	jnc	$+6      	;abs 0x4300
    42fc:	5f 43       	mov.b	#1,	r15	;r3 As==01
    42fe:	2e 3c       	jmp	$+94     	;abs 0x435c
{
  uint8_t  rtc = E_SUCCESS;
  uint16_t sw;

  Phasing *= 4; // correct to get ms approximately
  Period *=4; // correct to get ms approximately
    4300:	0e 5e       	rla	r14		
    4302:	0e 5e       	rla	r14		

  if (Prio>=NUMTASKS) return (E_BOUNDS); // out of bounds
  if (Period == 0) return (E_WRONGPAR);
    4304:	0e 93       	tst	r14		
    4306:	03 20       	jnz	$+8      	;abs 0x430e
    4308:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    430c:	27 3c       	jmp	$+80     	;abs 0x435c

uint16_t IntDisable (void)
{
  uint16_t sw;
    // sw = r2
  asm volatile ("mov.w r2, %0\n\t" : "=r"(sw));
    430e:	05 42       	mov	r2,	r5	
  _DINT();
    4310:	32 c2       	dint			
  Period *=4; // correct to get ms approximately

  if (Prio>=NUMTASKS) return (E_BOUNDS); // out of bounds
  if (Period == 0) return (E_WRONGPAR);
  sw = IntDisable (); 
  Taskp t = &Tasks[Prio]; 
    4312:	7b f3       	and.b	#-1,	r11	;r3 As==11
    4314:	0b 5b       	rla	r11		
    4316:	0b 5b       	rla	r11		
    4318:	0b 5b       	rla	r11		
    431a:	0b 5b       	rla	r11		
    431c:	3b 50 14 11 	add	#4372,	r11	;#0x1114
  if (t->Flags) rtc = E_BUSY; 
    4320:	1a 4b 08 00 	mov	8(r11),	r10	;0x0008(r11)
    4324:	0a 93       	tst	r10		
    4326:	02 24       	jz	$+6      	;abs 0x432c
    4328:	6f 43       	mov.b	#2,	r15	;r3 As==10
    432a:	17 3c       	jmp	$+48     	;abs 0x435a
                      void (*TaskFunc) (uint16_t), uint8_t Prio, uint8_t Flags)
{
  uint8_t  rtc = E_SUCCESS;
  uint16_t sw;

  Phasing *= 4; // correct to get ms approximately
    432c:	0f 5f       	rla	r15		
  if (Period == 0) return (E_WRONGPAR);
  sw = IntDisable (); 
  Taskp t = &Tasks[Prio]; 
  if (t->Flags) rtc = E_BUSY; 
  else {
    t->NextRelease = 0 + Phasing;
    432e:	0f 5f       	rla	r15		
    4330:	8b 4f 00 00 	mov	r15,	0(r11)	;0x0000(r11)
    //t->Remaining = Phasing;
    t->Period    = Period; 
    4334:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    t->NextPendingDeadline = t->NextRelease + Period;
    4338:	2e 5b       	add	@r11,	r14	
    433a:	8b 4e 02 00 	mov	r14,	2(r11)	;0x0002(r11)
    t->Activated = t->Invoked = 0; 
    433e:	cb 4a 07 00 	mov.b	r10,	7(r11)	;0x0007(r11)
    4342:	cb 4a 06 00 	mov.b	r10,	6(r11)	;0x0006(r11)
    t->Taskf     = TaskFunc; 
    4346:	8b 4c 0c 00 	mov	r12,	12(r11)	;0x000c(r11)
    t->ExecutionTime = ExecutionTime;
    434a:	8b 4d 0a 00 	mov	r13,	10(r11)	;0x000a(r11)
    t->Flags     = Flags | TRIGGERED;
    434e:	79 d0 40 00 	bis.b	#64,	r9	;#0x0040
    4352:	79 f3       	and.b	#-1,	r9	;r3 As==11
    4354:	8b 49 08 00 	mov	r9,	8(r11)	;0x0008(r11)
    4358:	4f 4a       	mov.b	r10,	r15	
}

void RestoreSW (uint16_t sw)
{
    // r2 = sw
  asm volatile ("mov.w %0, r2\n\t" :: "r"(sw));
    435a:	02 45       	mov	r5,	r2	
    t->Flags     = Flags | TRIGGERED;

  }
  RestoreSW (sw);
  return (rtc);
}
    435c:	35 41       	pop	r5		
    435e:	39 41       	pop	r9		
    4360:	3a 41       	pop	r10		
    4362:	3b 41       	pop	r11		
    4364:	30 41       	ret			

00004366 <UnRegisterTask>:

uint8_t UnRegisterTask (uint8_t t)
{
  Tasks[t].Flags = 0;
    4366:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4368:	0f 5f       	rla	r15		
    436a:	1f 53       	inc	r15		
    436c:	0f 5f       	rla	r15		
    436e:	0f 5f       	rla	r15		
    4370:	0f 5f       	rla	r15		
    4372:	8f 43 14 11 	mov	#0,	4372(r15);r3 As==00, 0x1114(r15)
  return (E_SUCCESS);
}  
    4376:	4f 43       	clr.b	r15		
    4378:	30 41       	ret			

0000437a <TimerIntrpt>:
    NextInterruptTime = CandidateValue;
  }
}

interrupt (TIMERA0_VECTOR) TimerIntrpt (void)
{
    437a:	0f 12       	push	r15		
    437c:	0e 12       	push	r14		
    437e:	0d 12       	push	r13		
    4380:	0c 12       	push	r12		
  int i;
  
  StartTracking(TT_TIMER_INTERRUPT);
    4382:	4f 43       	clr.b	r15		
    4384:	b0 12 14 47 	call	#0x4714	
  
  ContextSwitch();
    4388:	b0 12 64 42 	call	#0x4264	
  
  SetLeds(WHITE, 1);
    438c:	5e 43       	mov.b	#1,	r14	;r3 As==01
    438e:	6f 42       	mov.b	#4,	r15	;r2 As==10
    4390:	b0 12 36 42 	call	#0x4236	
    4394:	1e 42 44 11 	mov	&0x1144,r14	

  while(NextInterruptTime <= TAR)
    4398:	1b 3c       	jmp	$+56     	;abs 0x43d0
    439a:	3f 40 14 11 	mov	#4372,	r15	;#0x1114
  {
    NextInterruptTime = CandidateValue;
  }
}

interrupt (TIMERA0_VECTOR) TimerIntrpt (void)
    439e:	3d 43       	mov	#-1,	r13	;r3 As==11

    for (i = 0; i < NUMTASKS; i++) // loop through all task to see which need to be scheduled
    {
      Taskp t = &Tasks[i];

      if (t->Flags & TRIGGERED) // check if timer available
    43a0:	bf b0 40 00 	bit	#64,	8(r15)	;#0x0040, 0x0008(r15)
    43a4:	08 00 
    43a6:	0c 24       	jz	$+26     	;abs 0x43c0
      {
        if (t->NextRelease <= TAR) // task needs to be scheduled
    43a8:	2e 4f       	mov	@r15,	r14	
    43aa:	82 9e 70 01 	cmp	r14,	&0x0170	
    43ae:	05 28       	jnc	$+12     	;abs 0x43ba
        {
          t->Activated++; // set task to pending
    43b0:	df 53 06 00 	inc.b	6(r15)		;0x0006(r15)
          t->NextRelease += t->Period; // set next release time
    43b4:	9f 5f 04 00 	add	4(r15),	0(r15)	;0x0004(r15), 0x0000(r15)
    43b8:	00 00 
        }
        DetermineNextInterruptTime(t->NextRelease); // this might be the next interrupt time
    43ba:	2e 4f       	mov	@r15,	r14	
  return (E_SUCCESS);
}  

static void DetermineNextInterruptTime (CandidateValue)
{
  if (CandidateValue < NextInterruptTime)
    43bc:	0e 9d       	cmp	r13,	r14	
    43be:	01 28       	jnc	$+4      	;abs 0x43c2
    43c0:	0e 4d       	mov	r13,	r14	
    43c2:	3f 50 10 00 	add	#16,	r15	;#0x0010

  while(NextInterruptTime <= TAR)
  {
    NextInterruptTime = 0xFFFF; // reset next intterupt time so it can be determined again

    for (i = 0; i < NUMTASKS; i++) // loop through all task to see which need to be scheduled
    43c6:	3f 90 44 11 	cmp	#4420,	r15	;#0x1144
    43ca:	02 24       	jz	$+6      	;abs 0x43d0
    43cc:	0d 4e       	mov	r14,	r13	
    43ce:	e8 3f       	jmp	$-46     	;abs 0x43a0
  
  ContextSwitch();
  
  SetLeds(WHITE, 1);

  while(NextInterruptTime <= TAR)
    43d0:	82 9e 70 01 	cmp	r14,	&0x0170	
    43d4:	e2 2f       	jc	$-58     	;abs 0x439a
    43d6:	82 4e 44 11 	mov	r14,	&0x1144	
        DetermineNextInterruptTime(t->NextRelease); // this might be the next interrupt time
      }
    }    
  } 
 
  TACCR0 = NextInterruptTime; // set next interrupt time
    43da:	82 4e 72 01 	mov	r14,	&0x0172	

  SetLeds(WHITE, 0);
    43de:	4e 43       	clr.b	r14		
    43e0:	6f 42       	mov.b	#4,	r15	;r2 As==10
    43e2:	b0 12 36 42 	call	#0x4236	
  StopTracking(TT_TIMER_INTERRUPT);
    43e6:	4f 43       	clr.b	r15		
    43e8:	b0 12 20 47 	call	#0x4720	
  
  SetLeds(BROWN, 1);
    43ec:	5e 43       	mov.b	#1,	r14	;r3 As==01
    43ee:	6f 43       	mov.b	#2,	r15	;r3 As==10
    43f0:	b0 12 36 42 	call	#0x4236	

  CALL_SCHEDULER;
    43f4:	3f 40 14 11 	mov	#4372,	r15	;#0x1114
    43f8:	b0 12 16 44 	call	#0x4416	

  SetLeds(BROWN, 0);
    43fc:	4e 43       	clr.b	r14		
    43fe:	6f 43       	mov.b	#2,	r15	;r3 As==10
    4400:	b0 12 36 42 	call	#0x4236	

  ResumeContext();
    4404:	b0 12 7c 42 	call	#0x427c	
  PrintResults();
    4408:	b0 12 3c 47 	call	#0x473c	
}
    440c:	3c 41       	pop	r12		
    440e:	3d 41       	pop	r13		
    4410:	3e 41       	pop	r14		
    4412:	3f 41       	pop	r15		
    4414:	00 13       	reti			

00004416 <Scheduler_NP_FP>:
	t->Taskf(t->ExecutionTime); // execute task
	t->Flags ^= BUSY_EXEC;
}

void Scheduler_NP_FP(Task Tasks[])
{
    4416:	0b 12       	push	r11		
    4418:	0a 12       	push	r10		
    441a:	09 12       	push	r9		
    441c:	0b 4f       	mov	r15,	r11	
	StartTracking(TT_SCHEDULER);
    441e:	5f 43       	mov.b	#1,	r15	;r3 As==01
    4420:	b0 12 14 47 	call	#0x4714	
	t->Invoked++;
	t->Taskf(t->ExecutionTime); // execute task
	t->Flags ^= BUSY_EXEC;
}

void Scheduler_NP_FP(Task Tasks[])
    4424:	09 4b       	mov	r11,	r9	
    4426:	39 50 30 00 	add	#48,	r9	;#0x0030
	StartTracking(TT_SCHEDULER);
	int i;
	for (i = 0; i < NUMTASKS; i++)
	{
		Taskp t = &Tasks[i];
		if (t->Flags & BUSY_EXEC)
    442a:	1f 4b 08 00 	mov	8(r11),	r15	;0x0008(r11)
    442e:	3f f0 00 02 	and	#512,	r15	;#0x0200
    4432:	06 24       	jz	$+14     	;abs 0x4440
		{
			StopTracking(TT_SCHEDULER);
    4434:	5f 43       	mov.b	#1,	r15	;r3 As==01
    4436:	b0 12 20 47 	call	#0x4720	
			PrintResults();
    443a:	b0 12 3c 47 	call	#0x473c	
			break;
    443e:	36 3c       	jmp	$+110    	;abs 0x44ac
		}
		else
		{
			if (!(t->Flags & TRIGGERED))
    4440:	1e 4b 08 00 	mov	8(r11),	r14	;0x0008(r11)
    4444:	3e f0 40 00 	and	#64,	r14	;#0x0040
    4448:	0e 9f       	cmp	r15,	r14	
    444a:	20 20       	jnz	$+66     	;abs 0x448c
			{
				t->Activated = t->Invoked;
    444c:	5f 4b 07 00 	mov.b	7(r11),	r15	;0x0007(r11)
    4450:	cb 4f 06 00 	mov.b	r15,	6(r11)	;0x0006(r11)
				StopTracking(TT_SCHEDULER);
    4454:	5f 43       	mov.b	#1,	r15	;r3 As==01
    4456:	b0 12 20 47 	call	#0x4720	
    445a:	18 3c       	jmp	$+50     	;abs 0x448c

			static int Running = 0;

			while (t->Activated != t->Invoked)
			{
				if (!Running)
    445c:	0a 93       	tst	r10		
    445e:	1a 20       	jnz	$+54     	;abs 0x4494
				{
					Running = 0;
    4460:	82 4a 06 11 	mov	r10,	&0x1106	
					t->Flags |= BUSY_EXEC;
    4464:	bb d0 00 02 	bis	#512,	8(r11)	;#0x0200, 0x0008(r11)
    4468:	08 00 
					StopTracking(TT_SCHEDULER);
    446a:	5f 43       	mov.b	#1,	r15	;r3 As==01
    446c:	b0 12 20 47 	call	#0x4720	
#include "Led.h"
#include "TimeTracking.h"

static void ExecuteTask(Taskp t)
{
	t->Invoked++;
    4470:	db 53 07 00 	inc.b	7(r11)		;0x0007(r11)
	t->Taskf(t->ExecutionTime); // execute task
    4474:	1f 4b 0a 00 	mov	10(r11),r15	;0x000a(r11)
    4478:	9b 12 0c 00 	call	12(r11)	;0x000c(r11)
	t->Flags ^= BUSY_EXEC;
    447c:	bb e0 00 02 	xor	#512,	8(r11)	;#0x0200, 0x0008(r11)
    4480:	08 00 
				{
					Running = 0;
					t->Flags |= BUSY_EXEC;
					StopTracking(TT_SCHEDULER);
					ExecuteTask(t);
					StartTracking(TT_SCHEDULER);
    4482:	5f 43       	mov.b	#1,	r15	;r3 As==01
    4484:	b0 12 14 47 	call	#0x4714	
					Running = 0;
    4488:	82 4a 06 11 	mov	r10,	&0x1106	
				StopTracking(TT_SCHEDULER);
			}

			static int Running = 0;

			while (t->Activated != t->Invoked)
    448c:	5f 4b 07 00 	mov.b	7(r11),	r15	;0x0007(r11)
			{
				if (!Running)
    4490:	1a 42 06 11 	mov	&0x1106,r10	
				StopTracking(TT_SCHEDULER);
			}

			static int Running = 0;

			while (t->Activated != t->Invoked)
    4494:	cb 9f 06 00 	cmp.b	r15,	6(r11)	;0x0006(r11)
    4498:	e1 23       	jnz	$-60     	;abs 0x445c
					StartTracking(TT_SCHEDULER);
					Running = 0;
				}
			}
		}
		StopTracking(TT_SCHEDULER);
    449a:	5f 43       	mov.b	#1,	r15	;r3 As==01
    449c:	b0 12 20 47 	call	#0x4720	
		PrintResults();
    44a0:	b0 12 3c 47 	call	#0x473c	
    44a4:	3b 50 10 00 	add	#16,	r11	;#0x0010

void Scheduler_NP_FP(Task Tasks[])
{
	StartTracking(TT_SCHEDULER);
	int i;
	for (i = 0; i < NUMTASKS; i++)
    44a8:	0b 99       	cmp	r9,	r11	
    44aa:	bf 23       	jnz	$-128    	;abs 0x442a
			}
		}
		StopTracking(TT_SCHEDULER);
		PrintResults();
	}
}
    44ac:	39 41       	pop	r9		
    44ae:	3a 41       	pop	r10		
    44b0:	3b 41       	pop	r11		
    44b2:	30 41       	ret			

000044b4 <Scheduler_P_FP>:
	t->Taskf(t->ExecutionTime); // execute task
	t->Flags ^= BUSY_EXEC;
}

void Scheduler_P_FP(Task Tasks[])
{
    44b4:	0b 12       	push	r11		
    44b6:	0a 12       	push	r10		
    44b8:	0b 4f       	mov	r15,	r11	
	t->Invoked++;
	t->Taskf(t->ExecutionTime); // execute task
	t->Flags ^= BUSY_EXEC;
}

void Scheduler_P_FP(Task Tasks[])
    44ba:	0a 4f       	mov	r15,	r10	
    44bc:	3a 50 30 00 	add	#48,	r10	;#0x0030
{
	int i;
	for (i = 0; i < NUMTASKS; i++)
	{
		StartTracking(TT_SCHEDULER);
    44c0:	5f 43       	mov.b	#1,	r15	;r3 As==01
    44c2:	b0 12 14 47 	call	#0x4714	
		Taskp t = &Tasks[i];
		if (t->Flags & BUSY_EXEC)
    44c6:	1f 4b 08 00 	mov	8(r11),	r15	;0x0008(r11)
    44ca:	3f f0 00 02 	and	#512,	r15	;#0x0200
    44ce:	06 24       	jz	$+14     	;abs 0x44dc
		{
			StopTracking(TT_SCHEDULER);
    44d0:	5f 43       	mov.b	#1,	r15	;r3 As==01
    44d2:	b0 12 20 47 	call	#0x4720	
			PrintResults();
    44d6:	b0 12 3c 47 	call	#0x473c	
			break;
    44da:	2c 3c       	jmp	$+90     	;abs 0x4534
		}
		else
		{
			if (!(t->Flags & TRIGGERED))
    44dc:	1e 4b 08 00 	mov	8(r11),	r14	;0x0008(r11)
    44e0:	3e f0 40 00 	and	#64,	r14	;#0x0040
    44e4:	0e 9f       	cmp	r15,	r14	
    44e6:	1c 20       	jnz	$+58     	;abs 0x4520
			{
				t->Activated = t->Invoked;
    44e8:	5f 4b 07 00 	mov.b	7(r11),	r15	;0x0007(r11)
    44ec:	cb 4f 06 00 	mov.b	r15,	6(r11)	;0x0006(r11)
    44f0:	17 3c       	jmp	$+48     	;abs 0x4520
			}

			while (t->Activated != t->Invoked)
			{
				t->Flags |= BUSY_EXEC;
    44f2:	bb d0 00 02 	bis	#512,	8(r11)	;#0x0200, 0x0008(r11)
    44f6:	08 00 
				_EINT();
    44f8:	32 d2       	eint			
				StopTracking(TT_SCHEDULER);
    44fa:	5f 43       	mov.b	#1,	r15	;r3 As==01
    44fc:	b0 12 20 47 	call	#0x4720	
#include "Led.h"
#include "TimeTracking.h"

static void ExecuteTask(Taskp t)
{
	t->Invoked++;
    4500:	db 53 07 00 	inc.b	7(r11)		;0x0007(r11)
	t->Taskf(t->ExecutionTime); // execute task
    4504:	1f 4b 0a 00 	mov	10(r11),r15	;0x000a(r11)
    4508:	9b 12 0c 00 	call	12(r11)	;0x000c(r11)
	t->Flags ^= BUSY_EXEC;
    450c:	bb e0 00 02 	xor	#512,	8(r11)	;#0x0200, 0x0008(r11)
    4510:	08 00 
			{
				t->Flags |= BUSY_EXEC;
				_EINT();
				StopTracking(TT_SCHEDULER);
				ExecuteTask(t);
				StartTracking(TT_SCHEDULER);
    4512:	5f 43       	mov.b	#1,	r15	;r3 As==01
    4514:	b0 12 14 47 	call	#0x4714	
				_DINT();
    4518:	32 c2       	dint			
				StopTracking(TT_SCHEDULER);
    451a:	5f 43       	mov.b	#1,	r15	;r3 As==01
    451c:	b0 12 20 47 	call	#0x4720	
			if (!(t->Flags & TRIGGERED))
			{
				t->Activated = t->Invoked;
			}

			while (t->Activated != t->Invoked)
    4520:	db 9b 07 00 	cmp.b	7(r11),	6(r11)	;0x0007(r11), 0x0006(r11)
    4524:	06 00 
    4526:	e5 23       	jnz	$-52     	;abs 0x44f2
				StartTracking(TT_SCHEDULER);
				_DINT();
				StopTracking(TT_SCHEDULER);
			}
		}
		PrintResults();
    4528:	b0 12 3c 47 	call	#0x473c	
    452c:	3b 50 10 00 	add	#16,	r11	;#0x0010
}

void Scheduler_P_FP(Task Tasks[])
{
	int i;
	for (i = 0; i < NUMTASKS; i++)
    4530:	0b 9a       	cmp	r10,	r11	
    4532:	c6 23       	jnz	$-114    	;abs 0x44c0
				StopTracking(TT_SCHEDULER);
			}
		}
		PrintResults();
	}
}
    4534:	3a 41       	pop	r10		
    4536:	3b 41       	pop	r11		
    4538:	30 41       	ret			

0000453a <Scheduler_P_EDF>:
	t->Taskf(t->ExecutionTime); // execute task
	t->Flags ^= BUSY_EXEC;
}

void Scheduler_P_EDF(Task Tasks[])
{
    453a:	0b 12       	push	r11		
    453c:	0a 12       	push	r10		
    453e:	09 12       	push	r9		
    4540:	08 12       	push	r8		
    4542:	04 12       	push	r4		
    4544:	21 83       	decd	r1		
    4546:	0a 4f       	mov	r15,	r10	
	StartTracking(TT_SCHEDULER);
    4548:	5f 43       	mov.b	#1,	r15	;r3 As==01
    454a:	b0 12 14 47 	call	#0x4714	
	uint8_t Q[NUMTASKS - 1];

	//Init Q array Task numbers
	for (i = 0; i < NUMTASKS; i++)
	{
		Q[i] = i;
    454e:	c1 43 00 00 	mov.b	#0,	0(r1)	;r3 As==00, 0x0000(r1)
    4552:	d1 43 01 00 	mov.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    4556:	e1 43 02 00 	mov.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    455a:	2f 43       	mov	#2,	r15	;r3 As==10
    455c:	1e 3c       	jmp	$+62     	;abs 0x459a
	for (i = 0; i < NUMTASKS; i++)
	{
		int j;
		for (j = 0; j < NUMTASKS - i - 1; j++)
		{
			if (Tasks[Q[j]].NextRelease > Tasks[Q[j + 1]].NextRelease)
    455e:	6b 4d       	mov.b	@r13,	r11	
    4560:	4e 4b       	mov.b	r11,	r14	
    4562:	0e 5e       	rla	r14		
    4564:	0e 5e       	rla	r14		
    4566:	0e 5e       	rla	r14		
    4568:	0e 5e       	rla	r14		
    456a:	0e 5a       	add	r10,	r14	
    456c:	28 4e       	mov	@r14,	r8	
    456e:	1c 53       	inc	r12		
    4570:	59 4d 01 00 	mov.b	1(r13),	r9	;0x0001(r13)
    4574:	4e 49       	mov.b	r9,	r14	
    4576:	0e 5e       	rla	r14		
    4578:	0e 5e       	rla	r14		
    457a:	0e 5e       	rla	r14		
    457c:	0e 5e       	rla	r14		
    457e:	0e 5a       	add	r10,	r14	
    4580:	8e 98 00 00 	cmp	r8,	0(r14)	;0x0000(r14)
    4584:	04 2c       	jc	$+10     	;abs 0x458e
			{
				uint8_t T = Q[j];
				Q[j] = Q[j+1];
    4586:	cd 49 00 00 	mov.b	r9,	0(r13)	;0x0000(r13)
				Q[j+1] = T;
    458a:	cd 4b 01 00 	mov.b	r11,	1(r13)	;0x0001(r13)
    458e:	1d 53       	inc	r13		

	//Bubblesort on descending order
	for (i = 0; i < NUMTASKS; i++)
	{
		int j;
		for (j = 0; j < NUMTASKS - i - 1; j++)
    4590:	0c 9f       	cmp	r15,	r12	
    4592:	e5 3b       	jl	$-52     	;abs 0x455e
    4594:	3f 53       	add	#-1,	r15	;r3 As==11
	{
		Q[i] = i;
	}

	//Bubblesort on descending order
	for (i = 0; i < NUMTASKS; i++)
    4596:	3f 93       	cmp	#-1,	r15	;r3 As==11
    4598:	04 24       	jz	$+10     	;abs 0x45a2
    459a:	04 41       	mov	r1,	r4	
    459c:	0d 41       	mov	r1,	r13	
    459e:	0c 43       	clr	r12		
    45a0:	f7 3f       	jmp	$-16     	;abs 0x4590
				Q[j] = Q[j+1];
				Q[j+1] = T;
			}
		}
	}
	StopTracking(TT_SCHEDULER);
    45a2:	5f 43       	mov.b	#1,	r15	;r3 As==01
    45a4:	b0 12 20 47 	call	#0x4720	
	t->Invoked++;
	t->Taskf(t->ExecutionTime); // execute task
	t->Flags ^= BUSY_EXEC;
}

void Scheduler_P_EDF(Task Tasks[])
    45a8:	09 41       	mov	r1,	r9	
    45aa:	39 50 03 00 	add	#3,	r9	;#0x0003
		}
	}
	StopTracking(TT_SCHEDULER);
	for (i = 0; i < NUMTASKS; i++)
	{
		Taskp T = &Tasks[Q[i]];
    45ae:	6b 44       	mov.b	@r4,	r11	
    45b0:	0b 5b       	rla	r11		
    45b2:	0b 5b       	rla	r11		
    45b4:	0b 5b       	rla	r11		
    45b6:	0b 5b       	rla	r11		
    45b8:	0b 5a       	add	r10,	r11	
		if (T->Flags & BUSY_EXEC)
    45ba:	bb b0 00 02 	bit	#512,	8(r11)	;#0x0200, 0x0008(r11)
    45be:	08 00 
    45c0:	22 24       	jz	$+70     	;abs 0x4606
    45c2:	2b 3c       	jmp	$+88     	;abs 0x461a
		}
		else
		{
			while (T->Activated != T->Invoked)
			{
				if (T->Flags & TRIGGERED)
    45c4:	bb b0 40 00 	bit	#64,	8(r11)	;#0x0040, 0x0008(r11)
    45c8:	08 00 
    45ca:	1b 24       	jz	$+56     	;abs 0x4602
				{
					StartTracking(TT_SCHEDULER);
    45cc:	5f 43       	mov.b	#1,	r15	;r3 As==01
    45ce:	b0 12 14 47 	call	#0x4714	
					T->Flags |= BUSY_EXEC;
    45d2:	bb d0 00 02 	bis	#512,	8(r11)	;#0x0200, 0x0008(r11)
    45d6:	08 00 
					_EINT();
    45d8:	32 d2       	eint			
					StopTracking(TT_SCHEDULER);
    45da:	5f 43       	mov.b	#1,	r15	;r3 As==01
    45dc:	b0 12 20 47 	call	#0x4720	
#include "TimeTracking.h"
#include "Led.h"

static void ExecuteTask(Taskp t)
{
	t->Invoked++;
    45e0:	db 53 07 00 	inc.b	7(r11)		;0x0007(r11)
	t->Taskf(t->ExecutionTime); // execute task
    45e4:	1f 4b 0a 00 	mov	10(r11),r15	;0x000a(r11)
    45e8:	9b 12 0c 00 	call	12(r11)	;0x000c(r11)
	t->Flags ^= BUSY_EXEC;
    45ec:	bb e0 00 02 	xor	#512,	8(r11)	;#0x0200, 0x0008(r11)
    45f0:	08 00 
					StartTracking(TT_SCHEDULER);
					T->Flags |= BUSY_EXEC;
					_EINT();
					StopTracking(TT_SCHEDULER);
					ExecuteTask(T);
					StartTracking(TT_SCHEDULER);
    45f2:	5f 43       	mov.b	#1,	r15	;r3 As==01
    45f4:	b0 12 14 47 	call	#0x4714	
					_DINT();
    45f8:	32 c2       	dint			
					StopTracking(TT_SCHEDULER);
    45fa:	5f 43       	mov.b	#1,	r15	;r3 As==01
    45fc:	b0 12 20 47 	call	#0x4720	
    4600:	02 3c       	jmp	$+6      	;abs 0x4606
				}
				else
				{
					//StopTracking(TT_SCHEDULER);
					T->Activated = T->Invoked;
    4602:	cb 4f 06 00 	mov.b	r15,	6(r11)	;0x0006(r11)
			//PrintResults();
			break;
		}
		else
		{
			while (T->Activated != T->Invoked)
    4606:	5f 4b 07 00 	mov.b	7(r11),	r15	;0x0007(r11)
    460a:	cb 9f 06 00 	cmp.b	r15,	6(r11)	;0x0006(r11)
    460e:	da 23       	jnz	$-74     	;abs 0x45c4
					//StopTracking(TT_SCHEDULER);
					T->Activated = T->Invoked;
				}
			}
		}
		PrintResults();
    4610:	b0 12 3c 47 	call	#0x473c	
    4614:	14 53       	inc	r4		
				Q[j+1] = T;
			}
		}
	}
	StopTracking(TT_SCHEDULER);
	for (i = 0; i < NUMTASKS; i++)
    4616:	04 99       	cmp	r9,	r4	
    4618:	ca 23       	jnz	$-106    	;abs 0x45ae
				}
			}
		}
		PrintResults();
	}
}
    461a:	21 53       	incd	r1		
    461c:	34 41       	pop	r4		
    461e:	38 41       	pop	r8		
    4620:	39 41       	pop	r9		
    4622:	3a 41       	pop	r10		
    4624:	3b 41       	pop	r11		
    4626:	30 41       	ret			

00004628 <Scheduler_NP_EDF>:
	t->Invoked++;
	t->Taskf(t->ExecutionTime); // execute task
}

void Scheduler_NP_EDF(Task Tasks[])
{
    4628:	0b 12       	push	r11		
    462a:	0a 12       	push	r10		
    462c:	09 12       	push	r9		
    462e:	08 12       	push	r8		
    4630:	04 12       	push	r4		
    4632:	21 83       	decd	r1		
    4634:	0a 4f       	mov	r15,	r10	
	StartTracking(TT_SCHEDULER);
    4636:	5f 43       	mov.b	#1,	r15	;r3 As==01
    4638:	b0 12 14 47 	call	#0x4714	
	uint8_t Q[NUMTASKS - 1];

	//Init Q array Task numbers
	for (i = 0; i < NUMTASKS; i++)
	{
		Q[i] = i;
    463c:	c1 43 00 00 	mov.b	#0,	0(r1)	;r3 As==00, 0x0000(r1)
    4640:	d1 43 01 00 	mov.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    4644:	e1 43 02 00 	mov.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    4648:	2f 43       	mov	#2,	r15	;r3 As==10
    464a:	1e 3c       	jmp	$+62     	;abs 0x4688
	for (i = 0; i < NUMTASKS; i++)
	{
		int j;
		for (j = 0; j < NUMTASKS - i - 1; j++)
		{
			if (Tasks[Q[j]].NextRelease > Tasks[Q[j + 1]].NextRelease)
    464c:	6b 4d       	mov.b	@r13,	r11	
    464e:	4e 4b       	mov.b	r11,	r14	
    4650:	0e 5e       	rla	r14		
    4652:	0e 5e       	rla	r14		
    4654:	0e 5e       	rla	r14		
    4656:	0e 5e       	rla	r14		
    4658:	0e 5a       	add	r10,	r14	
    465a:	28 4e       	mov	@r14,	r8	
    465c:	1c 53       	inc	r12		
    465e:	59 4d 01 00 	mov.b	1(r13),	r9	;0x0001(r13)
    4662:	4e 49       	mov.b	r9,	r14	
    4664:	0e 5e       	rla	r14		
    4666:	0e 5e       	rla	r14		
    4668:	0e 5e       	rla	r14		
    466a:	0e 5e       	rla	r14		
    466c:	0e 5a       	add	r10,	r14	
    466e:	8e 98 00 00 	cmp	r8,	0(r14)	;0x0000(r14)
    4672:	04 2c       	jc	$+10     	;abs 0x467c
			{
				uint8_t T = Q[j];
				Q[j] = Q[j + 1];
    4674:	cd 49 00 00 	mov.b	r9,	0(r13)	;0x0000(r13)
				Q[j + 1] = T;
    4678:	cd 4b 01 00 	mov.b	r11,	1(r13)	;0x0001(r13)
    467c:	1d 53       	inc	r13		

	//Bubblesort on descending order
	for (i = 0; i < NUMTASKS; i++)
	{
		int j;
		for (j = 0; j < NUMTASKS - i - 1; j++)
    467e:	0c 9f       	cmp	r15,	r12	
    4680:	e5 3b       	jl	$-52     	;abs 0x464c
    4682:	3f 53       	add	#-1,	r15	;r3 As==11
	{
		Q[i] = i;
	}

	//Bubblesort on descending order
	for (i = 0; i < NUMTASKS; i++)
    4684:	3f 93       	cmp	#-1,	r15	;r3 As==11
    4686:	04 24       	jz	$+10     	;abs 0x4690
    4688:	04 41       	mov	r1,	r4	
    468a:	0d 41       	mov	r1,	r13	
    468c:	0c 43       	clr	r12		
    468e:	f7 3f       	jmp	$-16     	;abs 0x467e
				Q[j] = Q[j + 1];
				Q[j + 1] = T;
			}
		}
	}
	StopTracking(TT_SCHEDULER);
    4690:	5f 43       	mov.b	#1,	r15	;r3 As==01
    4692:	b0 12 20 47 	call	#0x4720	
{
	t->Invoked++;
	t->Taskf(t->ExecutionTime); // execute task
}

void Scheduler_NP_EDF(Task Tasks[])
    4696:	09 41       	mov	r1,	r9	
    4698:	39 50 03 00 	add	#3,	r9	;#0x0003
		}
	}
	StopTracking(TT_SCHEDULER);
	for (i = 0; i < NUMTASKS; i++)
	{
		Taskp T = &Tasks[Q[i]];
    469c:	6b 44       	mov.b	@r4,	r11	
    469e:	0b 5b       	rla	r11		
    46a0:	0b 5b       	rla	r11		
    46a2:	0b 5b       	rla	r11		
    46a4:	0b 5b       	rla	r11		
    46a6:	0b 5a       	add	r10,	r11	
		if (T->Flags & BUSY_EXEC )
    46a8:	bb b0 00 02 	bit	#512,	8(r11)	;#0x0200, 0x0008(r11)
    46ac:	08 00 
    46ae:	1e 24       	jz	$+62     	;abs 0x46ec
		{
			StopTracking(TT_SCHEDULER);
    46b0:	5f 43       	mov.b	#1,	r15	;r3 As==01
    46b2:	b0 12 20 47 	call	#0x4720	
			break;
    46b6:	27 3c       	jmp	$+80     	;abs 0x4706
		else
		{
			static int Running = 0;
			while (T->Activated != T->Invoked)
			{
				if (T->Flags & TRIGGERED && !Running)
    46b8:	bb b0 40 00 	bit	#64,	8(r11)	;#0x0040, 0x0008(r11)
    46bc:	08 00 
    46be:	14 24       	jz	$+42     	;abs 0x46e8
    46c0:	82 93 08 11 	tst	&0x1108	
    46c4:	11 20       	jnz	$+36     	;abs 0x46e8
				{
					int j;
					Running = 0;
    46c6:	82 43 08 11 	mov	#0,	&0x1108	;r3 As==00
					StopTracking(TT_SCHEDULER);
    46ca:	5f 43       	mov.b	#1,	r15	;r3 As==01
    46cc:	b0 12 20 47 	call	#0x4720	
#include "TimeTracking.h"
#include "Led.h"

static void ExecuteTask(Taskp t)
{
	t->Invoked++;
    46d0:	db 53 07 00 	inc.b	7(r11)		;0x0007(r11)
	t->Taskf(t->ExecutionTime); // execute task
    46d4:	1f 4b 0a 00 	mov	10(r11),r15	;0x000a(r11)
    46d8:	9b 12 0c 00 	call	12(r11)	;0x000c(r11)
				{
					int j;
					Running = 0;
					StopTracking(TT_SCHEDULER);
					ExecuteTask(T);
					StartTracking(TT_SCHEDULER);
    46dc:	5f 43       	mov.b	#1,	r15	;r3 As==01
    46de:	b0 12 14 47 	call	#0x4714	
					Running = 0;
    46e2:	82 43 08 11 	mov	#0,	&0x1108	;r3 As==00
		else
		{
			static int Running = 0;
			while (T->Activated != T->Invoked)
			{
				if (T->Flags & TRIGGERED && !Running)
    46e6:	02 3c       	jmp	$+6      	;abs 0x46ec
					StartTracking(TT_SCHEDULER);
					Running = 0;
				}
				else
				{
					T->Activated = T->Invoked;
    46e8:	cb 4f 06 00 	mov.b	r15,	6(r11)	;0x0006(r11)
			break;
		}
		else
		{
			static int Running = 0;
			while (T->Activated != T->Invoked)
    46ec:	5f 4b 07 00 	mov.b	7(r11),	r15	;0x0007(r11)
    46f0:	cb 9f 06 00 	cmp.b	r15,	6(r11)	;0x0006(r11)
    46f4:	e1 23       	jnz	$-60     	;abs 0x46b8
				{
					T->Activated = T->Invoked;
				}
			}
		}
		StopTracking(TT_SCHEDULER);
    46f6:	5f 43       	mov.b	#1,	r15	;r3 As==01
    46f8:	b0 12 20 47 	call	#0x4720	
		PrintResults();
    46fc:	b0 12 3c 47 	call	#0x473c	
    4700:	14 53       	inc	r4		
				Q[j + 1] = T;
			}
		}
	}
	StopTracking(TT_SCHEDULER);
	for (i = 0; i < NUMTASKS; i++)
    4702:	04 99       	cmp	r9,	r4	
    4704:	cb 23       	jnz	$-104    	;abs 0x469c
			}
		}
		StopTracking(TT_SCHEDULER);
		PrintResults();
	}
}
    4706:	21 53       	incd	r1		
    4708:	34 41       	pop	r4		
    470a:	38 41       	pop	r8		
    470c:	39 41       	pop	r9		
    470e:	3a 41       	pop	r10		
    4710:	3b 41       	pop	r11		
    4712:	30 41       	ret			

00004714 <StartTracking>:
static uint16_t Totals[TT_MAX];
static uint8_t JobsExecuted;

void StartTracking(uint8_t index)
{
    StartTimes[index] = TAR;
    4714:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4716:	0f 5f       	rla	r15		
    4718:	9f 42 70 01 	mov	&0x0170,4362(r15);0x110a(r15)
    471c:	0a 11 
}
    471e:	30 41       	ret			

00004720 <StopTracking>:

void StopTracking(uint8_t index)
{
    Totals[index] += TAR - StartTimes[index];
    4720:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4722:	0f 5f       	rla	r15		
    4724:	1e 42 70 01 	mov	&0x0170,r14	
    4728:	1e 5f 0e 11 	add	4366(r15),r14	;0x110e(r15)
    472c:	1e 8f 0a 11 	sub	4362(r15),r14	;0x110a(r15)
    4730:	8f 4e 0e 11 	mov	r14,	4366(r15);0x110e(r15)
}
    4734:	30 41       	ret			

00004736 <AddJobExecution>:

void AddJobExecution()
{
    JobsExecuted++;
    4736:	d2 53 12 11 	inc.b	&0x1112	
}
    473a:	30 41       	ret			

0000473c <PrintResults>:

void PrintResults()
{
    P1OUT = Totals[TT_TIMER_INTERRUPT] & 0xFF;
    473c:	3e 40 0e 11 	mov	#4366,	r14	;#0x110e
    4740:	2d 4e       	mov	@r14,	r13	
    4742:	c2 4d 21 00 	mov.b	r13,	&0x0021	
    P2OUT = Totals[TT_TIMER_INTERRUPT] >> 8;
    4746:	3f 4e       	mov	@r14+,	r15	
    4748:	0f 4d       	mov	r13,	r15	
    474a:	8f 10       	swpb	r15		
    474c:	7f f3       	and.b	#-1,	r15	;r3 As==11
    474e:	c2 4f 29 00 	mov.b	r15,	&0x0029	

    P3OUT = Totals[TT_SCHEDULER] & 0xFF;
    4752:	2f 4e       	mov	@r14,	r15	
    4754:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    P4OUT = Totals[TT_SCHEDULER] >> 8;
    4758:	8f 10       	swpb	r15		
    475a:	7f f3       	and.b	#-1,	r15	;r3 As==11
    475c:	c2 4f 1d 00 	mov.b	r15,	&0x001d	

    P6OUT = JobsExecuted;
    4760:	d2 42 12 11 	mov.b	&0x1112,&0x0035	
    4764:	35 00 
    4766:	30 41       	ret			

Disassembly of section .vectors:

0000ffe0 <InterruptVectors>:
    ffe0:	30 40 30 40 30 40 30 40 30 40 30 40 7a 43 30 40     0@0@0@0@0@0@zC0@
    fff0:	30 40 30 40 30 40 30 40 30 40 30 40 30 40 00 40     0@0@0@0@0@0@0@.@
